{"ast":null,"code":"import { createElementVNode as _createElementVNode, toDisplayString as _toDisplayString, resolveComponent as _resolveComponent, createVNode as _createVNode, createCommentVNode as _createCommentVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, createTextVNode as _createTextVNode } from \"vue\";\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"h2\", null, \"Sobre nosotros\", -1 /* HOISTED */);\nconst _hoisted_2 = {\n  class: \"group\"\n};\nconst _hoisted_3 = {\n  class: \"group\"\n};\nconst _hoisted_4 = /*#__PURE__*/_createElementVNode(\"h2\", null, \"De dónde somos:\", -1 /* HOISTED */);\nconst _hoisted_5 = {\n  class: \"group\"\n};\nconst _hoisted_6 = {\n  key: 0,\n  id: \"cityOfUs\"\n};\nconst _hoisted_7 = {\n  key: 1,\n  id: \"cityOfUs\"\n};\nconst _hoisted_8 = {\n  key: 2,\n  id: \"cityOfUs\"\n};\nconst _hoisted_9 = {\n  key: 3,\n  id: \"cityOfUs\"\n};\nconst _hoisted_10 = /*#__PURE__*/_createElementVNode(\"h2\", null, \"Tecnologías que sabemos:\", -1 /* HOISTED */);\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_EachUs = _resolveComponent(\"EachUs\");\n  return _openBlock(), _createElementBlock(_Fragment, null, [_hoisted_1, _createElementVNode(\"p\", null, \" Estudiantes de \" + _toDisplayString($setup.studies), 1 /* TEXT */), _createElementVNode(\"p\", null, \" Lugar de estudios: \" + _toDisplayString($setup.city), 1 /* TEXT */), _createElementVNode(\"p\", null, _toDisplayString($setup.mensaje.title) + \" - \" + _toDisplayString($setup.mensaje.text), 1 /* TEXT */), _createVNode(_component_EachUs), _createElementVNode(\"div\", _hoisted_2, [_createElementVNode(\"h5\", null, _toDisplayString($setup.name[0]), 1 /* TEXT */), _createCommentVNode(\" 3. Recoger a la variable name para poder mostrarla  \"), _createElementVNode(\"h5\", null, _toDisplayString($setup.name[1]), 1 /* TEXT */), _createCommentVNode(\" 3. Recoger a la variable name para poder mostrarla  \"), _createElementVNode(\"h5\", null, _toDisplayString($setup.name[2]), 1 /* TEXT */), _createCommentVNode(\" 3. Recoger a la variable name para poder mostrarla  \"), _createElementVNode(\"h5\", null, _toDisplayString($setup.name[3]), 1 /* TEXT */), _createCommentVNode(\" 3. Recoger a la variable name para poder mostrarla  \")]), _createElementVNode(\"div\", _hoisted_3, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.surname, (surname, index) => {\n    return _openBlock(), _createElementBlock(\"span\", {\n      key: index\n    }, [_createCommentVNode(\" Bucle For: incluyes la variables y el index por si en algún momento tu array crece. La key tendrá que ser index \"), _createTextVNode(\" \" + _toDisplayString(surname), 1 /* TEXT */)]);\n  }), 128 /* KEYED_FRAGMENT */))]), _hoisted_4, _createElementVNode(\"div\", _hoisted_5, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.cities, cities => {\n    return _openBlock(), _createElementBlock(_Fragment, {\n      key: cities\n    }, [_createCommentVNode(\" IF / ELSE: Se tiene que utilizar template porque es la única etiqueta que solo renderiza el texto. Y primero se tiene que poner el bucle for y después el IF / ELSE \"), cities === 'Sevilla' ? (_openBlock(), _createElementBlock(\"p\", _hoisted_6, _toDisplayString($setup.name[0]) + \" - \" + _toDisplayString(cities), 1 /* TEXT */)) : cities === 'Aspe' ? (_openBlock(), _createElementBlock(\"p\", _hoisted_7, _toDisplayString($setup.name[1]) + \" - \" + _toDisplayString(cities), 1 /* TEXT */)) : cities === 'Bakio' ? (_openBlock(), _createElementBlock(\"p\", _hoisted_8, _toDisplayString($setup.name[2]) + \" - \" + _toDisplayString(cities), 1 /* TEXT */)) : (_openBlock(), _createElementBlock(\"p\", _hoisted_9, _toDisplayString($setup.name[3]) + \" - \" + _toDisplayString(cities), 1 /* TEXT */))], 64 /* STABLE_FRAGMENT */);\n  }), 128 /* KEYED_FRAGMENT */))]), _hoisted_10, (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.tecnology, (tecnology, index) => {\n    return _openBlock(), _createElementBlock(\"li\", {\n      key: index\n    }, _toDisplayString(tecnology), 1 /* TEXT */);\n  }), 128 /* KEYED_FRAGMENT */))], 64 /* STABLE_FRAGMENT */);\n}","map":{"version":3,"names":["_createElementVNode","class","id","_hoisted_1","_toDisplayString","$setup","studies","city","mensaje","title","text","_createVNode","_component_EachUs","_hoisted_2","name","_createCommentVNode","_hoisted_3","_createElementBlock","_Fragment","_renderList","surname","index","key","_hoisted_4","_hoisted_5","cities","_hoisted_6","_hoisted_7","_hoisted_8","_hoisted_9","_hoisted_10","tecnology"],"sources":["C:\\Users\\dieze\\PeñascalF5\\Vue Proyecto\\Primer-proyecto-Vue\\src\\components\\AboutUs.vue"],"sourcesContent":["<template>\r\n    <h2>Sobre nosotros</h2>\r\n    <p> Estudiantes de {{ studies }}</p>\r\n    <p> Lugar de estudios: {{ city }}</p>\r\n    <p>{{ mensaje.title }} - {{ mensaje.text }}</p>\r\n\r\n    <EachUs />\r\n \r\n    <div class=\"group\">\r\n        <h5> {{ name[0] }} </h5>   <!-- 3. Recoger a la variable name para poder mostrarla  -->\r\n        <h5> {{ name[1] }} </h5>   <!-- 3. Recoger a la variable name para poder mostrarla  -->\r\n        <h5> {{ name[2] }} </h5>   <!-- 3. Recoger a la variable name para poder mostrarla  -->\r\n        <h5> {{ name[3] }} </h5>   <!-- 3. Recoger a la variable name para poder mostrarla  -->\r\n   </div> \r\n   \r\n   <div class=\"group\">\r\n      <span v-for=\"(surname, index) in surname\" :key=\"index\"> <!-- Bucle For: incluyes la variables y el index por si en algún momento tu array crece. La key tendrá que ser index -->\r\n            {{ surname }}\r\n      </span> \r\n\r\n    </div>\r\n\r\n    <h2>De dónde somos:</h2>\r\n    <div class=\"group\">\r\n          <template  v-for=\"cities in cities\" :key=\"cities\"> <!-- IF / ELSE: Se tiene que utilizar template porque es la única etiqueta que solo renderiza el texto. Y primero se tiene que poner el bucle for y después el IF / ELSE -->\r\n              <p id=\"cityOfUs\" v-if=\"cities === 'Sevilla'\">\r\n                  {{name[0]}} - {{ cities }}\r\n              </p>\r\n              <p id=\"cityOfUs\" v-else-if=\"cities === 'Aspe'\">\r\n                  {{name[1]}} - {{ cities }}\r\n              </p>\r\n              <p id=\"cityOfUs\" v-else-if=\"cities === 'Bakio'\">\r\n                  {{name[2]}} - {{ cities }}\r\n              </p>\r\n              <p id=\"cityOfUs\" v-else>\r\n                  {{name[3]}} - {{ cities }}\r\n              </p>\r\n            </template>\r\n   </div>\r\n   \r\n   <h2>Tecnologías que sabemos:</h2>\r\n      <li v-for=\"(tecnology, index) in tecnology\" :key=\"index\">\r\n            {{ tecnology }}\r\n    </li>\r\n  </template>\r\n  \r\n  <script>\r\n  import EachUs from './EachUs';\r\n  export default {\r\n    components: {\r\n      EachUs,\r\n    },\r\n\r\n    setup(){ // PARA INCLUIR EL COMPONENTE EN EL TEMPLATE \r\n      const name = [\"Juan\", \"María\", \"Gorka\", \"Gonzalo\"]; // 1. Crear la variable name \r\n      const surname = [\"Benito\" , \"Diez\", \"Ibarrondo\", \"Lekumbe\"];\r\n      const studies = \"Peñascal F5, Bootcamp FullStack Developer\";\r\n      const city = \"Bolueta\"\r\n      const mensaje = {\r\n        title: \"Empezamos en noviembre de 2022\",\r\n        text: \"Esperamos finalizar en julio de 2023\",\r\n      }\r\n      const tecnology = [\"HTML\", \"SCSS\", \"JavaScript\", \"Vue\"];\r\n      const cities = [\"Aspe\", \"Bakio\", \"Algorta\", \"Sevilla\"];\r\n\r\n      return { //2. Devolver la variable name para poder llamarla en el template\r\n        name,\r\n        studies,\r\n        city,\r\n        mensaje,\r\n        surname,\r\n        tecnology,\r\n        cities,\r\n      }\r\n\r\n    }\r\n  \r\n  }\r\n  </script>\r\n  \r\n  <style>\r\n\r\n  .group{\r\n    display: flex;\r\n  }\r\n\r\n  h5{\r\n    padding:0 4rem;\r\n    font-size: 0.9rem;\r\n    height: 0;\r\n  }\r\n  span{\r\n    padding: 1rem 3.83rem;\r\n    font-size: 0.9rem;\r\n    font-weight: 600;\r\n  }\r\n  #cityOfUs{\r\n    padding: 0 3.83rem;\r\n    font-size: 0.9rem;\r\n    font-weight: 600;\r\n    color:red;\r\n  }\r\n\r\n  h2{\r\n    margin: 4rem 0rem 1rem 0rem;\r\n  }\r\n  \r\n  </style>"],"mappings":";gCACIA,mBAAA,CAAuB,YAAnB,gBAAc;;EAObC,KAAK,EAAC;AAAO;;EAOdA,KAAK,EAAC;AAAO;gCAOjBD,mBAAA,CAAwB,YAApB,iBAAe;;EACdC,KAAK,EAAC;AAAO;;;EAELC,EAAE,EAAC;;;;EAGHA,EAAE,EAAC;;;;EAGHA,EAAE,EAAC;;;;EAGHA,EAAE,EAAC;;iCAMjBF,mBAAA,CAAiC,YAA7B,0BAAwB;;;;6DAvC3BG,UAAuB,EACvBH,mBAAA,CAAoC,WAAjC,kBAAgB,GAAAI,gBAAA,CAAGC,MAAA,CAAAC,OAAO,kBAC7BN,mBAAA,CAAqC,WAAlC,sBAAoB,GAAAI,gBAAA,CAAGC,MAAA,CAAAE,IAAI,kBAC9BP,mBAAA,CAA+C,WAAAI,gBAAA,CAAzCC,MAAA,CAAAG,OAAO,CAACC,KAAK,IAAG,KAAG,GAAAL,gBAAA,CAAGC,MAAA,CAAAG,OAAO,CAACE,IAAI,kBAExCC,YAAA,CAAUC,iBAAA,GAEVZ,mBAAA,CAKK,OALLa,UAKK,GAJDb,mBAAA,CAAwB,YAAAI,gBAAA,CAAhBC,MAAA,CAAAS,IAAI,qBAAeC,mBAAA,yDAA4D,EACvFf,mBAAA,CAAwB,YAAAI,gBAAA,CAAhBC,MAAA,CAAAS,IAAI,qBAAeC,mBAAA,yDAA4D,EACvFf,mBAAA,CAAwB,YAAAI,gBAAA,CAAhBC,MAAA,CAAAS,IAAI,qBAAeC,mBAAA,yDAA4D,EACvFf,mBAAA,CAAwB,YAAAI,gBAAA,CAAhBC,MAAA,CAAAS,IAAI,qBAAeC,mBAAA,yDAA4D,C,GAG5Ff,mBAAA,CAKO,OALPgB,UAKO,I,kBAJJC,mBAAA,CAEOC,SAAA,QAAAC,WAAA,CAF0Bd,MAAA,CAAAe,OAAO,GAA1BA,OAAO,EAAEC,KAAK;yBAA5BJ,mBAAA,CAEO;MAFoCK,GAAG,EAAED;IAAK,IAAGN,mBAAA,qHAAwH,E,iBAAA,GAC1K,GAAAX,gBAAA,CAAGgB,OAAO,iB;oCAKlBG,UAAwB,EACxBvB,mBAAA,CAeK,OAfLwB,UAeK,I,kBAdCP,mBAAA,CAaaC,SAAA,QAAAC,WAAA,CAbed,MAAA,CAAAoB,MAAM,EAAhBA,MAAM;;WAAkBA;IAAM,IAAGV,mBAAA,yKAA4K,EACpMU,MAAM,kB,cAA7BR,mBAAA,CAEI,KAFJS,UAEI,EAAAtB,gBAAA,CADEC,MAAA,CAAAS,IAAI,OAAK,KAAG,GAAAV,gBAAA,CAAGqB,MAAM,oBAECA,MAAM,e,cAAlCR,mBAAA,CAEI,KAFJU,UAEI,EAAAvB,gBAAA,CADEC,MAAA,CAAAS,IAAI,OAAK,KAAG,GAAAV,gBAAA,CAAGqB,MAAM,oBAECA,MAAM,gB,cAAlCR,mBAAA,CAEI,KAFJW,UAEI,EAAAxB,gBAAA,CADEC,MAAA,CAAAS,IAAI,OAAK,KAAG,GAAAV,gBAAA,CAAGqB,MAAM,qB,cAE3BR,mBAAA,CAEI,KAFJY,UAEI,EAAAzB,gBAAA,CADEC,MAAA,CAAAS,IAAI,OAAK,KAAG,GAAAV,gBAAA,CAAGqB,MAAM,kB;oCAKtCK,WAAiC,G,kBAC9Bb,mBAAA,CAEGC,SAAA,QAAAC,WAAA,CAF8Bd,MAAA,CAAA0B,SAAS,GAA9BA,SAAS,EAAEV,KAAK;yBAA5BJ,mBAAA,CAEG;MAF0CK,GAAG,EAAED;IAAK,GAAAjB,gBAAA,CAC9C2B,SAAS"},"metadata":{},"sourceType":"module","externalDependencies":[]}