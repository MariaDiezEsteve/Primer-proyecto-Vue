{"ast":null,"code":"import { createElementVNode as _createElementVNode, toDisplayString as _toDisplayString, createTextVNode as _createTextVNode, createCommentVNode as _createCommentVNode, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"h1\", null, \"Contador - Evento onClick\", -1 /* HOISTED */);\n\nexport function render(_ctx, _cache) {\n  return _openBlock(), _createElementBlock(_Fragment, null, [_hoisted_1, _createElementVNode(\"button\", {\n    onClick: _cache[0] || (_cache[0] = (...args) => _ctx.getData && _ctx.getData(...args))\n  }, [_createTextVNode(\" Up click\"), _createElementVNode(\"span\", null, _toDisplayString(_ctx.upOne), 1 /* TEXT */), _createTextVNode(\" times\")]), _createCommentVNode(\" 1. Crear el evento click, y llamar a la función. También se podría crear v-on:click=\\\"\\\" \"), _createElementVNode(\"button\", {\n    onClick: _cache[1] || (_cache[1] = (...args) => _ctx.testData && _ctx.testData(...args))\n  }, [_createTextVNode(\" Down click \"), _createElementVNode(\"span\", null, _toDisplayString(_ctx.downOne), 1 /* TEXT */), _createTextVNode(\" times\")])], 64 /* STABLE_FRAGMENT */);\n}","map":{"version":3,"names":["_createElementVNode","_hoisted_1","onClick","_cache","args","_ctx","getData","_toDisplayString","upOne","_createCommentVNode","testData","downOne"],"sources":["/home/penascalf5/Documentos/Vue3 - Proyecto/Primer-proyecto-Vue/src/components/CounterTimes.vue"],"sourcesContent":["<template>\n  <h1>Contador - Evento onClick</h1>\n  <button @click=\"getData\"> Up click<span>{{ upOne }}</span> times</button> <!-- 1. Crear el evento click, y llamar a la función. También se podría crear v-on:click=\"\" -->\n  <button @click=\"testData\"> Down click <span>{{ downOne }}</span> times</button>\n  </template>\n\n<script setup>\n import {ref} from \"vue\"; //4. Necesitamos ref (una función predeterminada de VUE) para renderizar el valor del contador y que aparezca en el botón\n    export default {\n    props: {\n        getLessData: Function,\n        downOne: Number,\n    },\n        setup(props){\n\n            let upOne = ref(0); // 2. Crear una variable let ya que const sería una constante no podría variar su valor.\n                                // 5. Inicializamos la variable upOne con ref, y le decimos que incialice con el valor 0\n            const getData = () => { // 3. Crear una variable con una función anónima\n                upOne.value ++;  // 6. Para poder acceder al valor de upOne tenemos que incluir .value\n                console.log(upOne)\n                // RefImpl {__v_isShallow: false, dep: Set(1), __v_isRef: true, _rawValue: 1, _value: 1}\n                //     dep : Set(1) {ReactiveEffect}\n                //     __v_isRef : true\n                //     __v_isShallow : false\n                //     _rawValue : 1\n                //     _value :  1\n                //     value (...)\n                //     [[Prototype]] : Object\n            }\n\n            const testData = () => {\n                props.getLessData();\n            }\n          \n\n            return{\n                upOne, \n                getData,\n                testData            \n            }\n        }\n}\n</script>\n\n<style>\nspan{\n    color: red;\n}\n</style>"],"mappings":";gCACEA,mBAAA,CAAkC,YAA9B,2BAAyB;;;6DAA7BC,UAAkC,EAClCD,mBAAA,CAAyE;IAAhEE,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,IAAA,CAAAC,OAAA,IAAAD,IAAA,CAAAC,OAAA,IAAAF,IAAA,CAAO;uBAAE,WAAS,GAAAJ,mBAAA,CAAwB,cAAAO,gBAAA,CAAfF,IAAA,CAAAG,KAAK,kB,iBAAU,QAAM,E,GAAUC,mBAAA,8FAA+F,EACzKT,mBAAA,CAA+E;IAAtEE,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,IAAA,CAAAK,QAAA,IAAAL,IAAA,CAAAK,QAAA,IAAAN,IAAA,CAAQ;uBAAE,cAAY,GAAAJ,mBAAA,CAA0B,cAAAO,gBAAA,CAAjBF,IAAA,CAAAM,OAAO,kB,iBAAU,QAAM,E"},"metadata":{},"sourceType":"module","externalDependencies":[]}