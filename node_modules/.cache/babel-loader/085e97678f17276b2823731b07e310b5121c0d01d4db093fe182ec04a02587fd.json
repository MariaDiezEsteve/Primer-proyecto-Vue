{"ast":null,"code":"import { createElementVNode as _createElementVNode, toDisplayString as _toDisplayString, createTextVNode as _createTextVNode, createCommentVNode as _createCommentVNode, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"h1\", null, \"Contador - Evento onClick\", -1 /* HOISTED */);\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(_Fragment, null, [_hoisted_1, _createElementVNode(\"button\", {\n    onClick: _cache[0] || (_cache[0] = (...args) => $setup.getData && $setup.getData(...args))\n  }, [_createTextVNode(\" It was click \"), _createElementVNode(\"span\", null, _toDisplayString($setup.up), 1 /* TEXT */), _createTextVNode(\" times\")]), _createCommentVNode(\" 1. Crear el evento click, y llamar a la función. También se podría crear v-on:click=\\\"\\\" \")], 64 /* STABLE_FRAGMENT */);\n}","map":{"version":3,"names":["_createElementVNode","_hoisted_1","onClick","_cache","args","$setup","getData","_toDisplayString","up","_createCommentVNode"],"sources":["C:\\Users\\dieze\\PeñascalF5\\Vue Proyecto\\Primer-proyecto-Vue\\src\\components\\CounterTimes.vue"],"sourcesContent":["<template>\r\n  <h1>Contador - Evento onClick</h1>\r\n  <button @click=\"getData\"> It was click <span>{{ up }}</span> times</button> <!-- 1. Crear el evento click, y llamar a la función. También se podría crear v-on:click=\"\" -->\r\n</template>\r\n\r\n<script>\r\n import {ref} from \"vue\"; //4. Necesitamos ref (una función predeterminada de VUE) para renderizar el valor del contador y que aparezca en el botón\r\n    export default {\r\n        setup(){\r\n\r\n            let up = ref(0); // 2. Crear una variable let ya que const sería una constante no podría variar su valor.\r\n                                // 5. Inicializamos la variable up con ref, y le decimos que incialice con el valor 0\r\n            const getData = () => { // 3. Crear una variable con una función anónima\r\n                up.value ++;  // 6. Para poder acceder al valor de up tenemos que incluir .value\r\n                console.log(up)\r\n                // RefImpl {__v_isShallow: false, dep: Set(1), __v_isRef: true, _rawValue: 1, _value: 1}\r\n                //     dep : Set(1) {ReactiveEffect}\r\n                //     __v_isRef : true\r\n                //     __v_isShallow : false\r\n                //     _rawValue : 1\r\n                //     _value :  1\r\n                //     value (...)\r\n                //     [[Prototype]] : Object\r\n            }\r\n\r\n            return{\r\n                up, \r\n                getData            \r\n            }\r\n        }\r\n}\r\n</script>\r\n\r\n<style>\r\nspan{\r\n    color: red;\r\n}\r\n</style>"],"mappings":";gCACEA,mBAAA,CAAkC,YAA9B,2BAAyB;;;6DAA7BC,UAAkC,EAClCD,mBAAA,CAA2E;IAAlEE,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,MAAA,CAAAC,OAAA,IAAAD,MAAA,CAAAC,OAAA,IAAAF,IAAA,CAAO;uBAAE,gBAAc,GAAAJ,mBAAA,CAAqB,cAAAO,gBAAA,CAAZF,MAAA,CAAAG,EAAE,kB,iBAAU,QAAM,E,GAAUC,mBAAA,8FAA+F,C"},"metadata":{},"sourceType":"module","externalDependencies":[]}