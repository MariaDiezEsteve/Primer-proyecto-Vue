{"ast":null,"code":"import { ref } from \"vue\"; //4. Necesitamos ref (una función predeterminada de VUE) para renderizar el valor del contador y que aparezca en el botón\nexport default {\n  props: {\n    getLessData: Function,\n    downOne: Number\n  },\n  setup() {\n    let upOne = ref(0); // 2. Crear una variable let ya que const sería una constante no podría variar su valor.\n    // 5. Inicializamos la variable upOne con ref, y le decimos que incialice con el valor 0\n    const getData = () => {\n      // 3. Crear una variable con una función anónima\n      upOne.value++; // 6. Para poder acceder al valor de upOne tenemos que incluir .value\n      console.log(upOne);\n      // RefImpl {__v_isShallow: false, dep: Set(1), __v_isRef: true, _rawValue: 1, _value: 1}\n      //     dep : Set(1) {ReactiveEffect}\n      //     __v_isRef : true\n      //     __v_isShallow : false\n      //     _rawValue : 1\n      //     _value :  1\n      //     value (...)\n      //     [[Prototype]] : Object\n    };\n\n    const testData = () => {\n      props.getLessData();\n    };\n    return {\n      upOne,\n      getData,\n      testData\n    };\n  }\n};","map":{"version":3,"names":["ref","props","getLessData","Function","downOne","Number","setup","upOne","getData","value","console","log","testData"],"sources":["/home/penascalf5/Documentos/Vue3 - Proyecto/Primer-proyecto-Vue/src/components/CounterTimes.vue"],"sourcesContent":["<template>\n  <h1>Contador - Evento onClick</h1>\n  <button @click=\"getData\"> Up click<span>{{ upOne }}</span> times</button> <!-- 1. Crear el evento click, y llamar a la función. También se podría crear v-on:click=\"\" -->\n  <button @click=\"testData\"> Down click <span>{{ downOne }}</span> times</button>\n  </template>\n\n<script>\n import {ref} from \"vue\"; //4. Necesitamos ref (una función predeterminada de VUE) para renderizar el valor del contador y que aparezca en el botón\n    export default {\n    props: {\n        getLessData: Function,\n        downOne: Number,\n    },\n        setup(){\n\n            let upOne = ref(0); // 2. Crear una variable let ya que const sería una constante no podría variar su valor.\n                                // 5. Inicializamos la variable upOne con ref, y le decimos que incialice con el valor 0\n            const getData = () => { // 3. Crear una variable con una función anónima\n                upOne.value ++;  // 6. Para poder acceder al valor de upOne tenemos que incluir .value\n                console.log(upOne)\n                // RefImpl {__v_isShallow: false, dep: Set(1), __v_isRef: true, _rawValue: 1, _value: 1}\n                //     dep : Set(1) {ReactiveEffect}\n                //     __v_isRef : true\n                //     __v_isShallow : false\n                //     _rawValue : 1\n                //     _value :  1\n                //     value (...)\n                //     [[Prototype]] : Object\n            }\n\n            const testData = () => {\n                props.getLessData();\n            }\n          \n\n            return{\n                upOne, \n                getData,\n                testData            \n            }\n        }\n}\n</script>\n\n<style>\nspan{\n    color: red;\n}\n</style>"],"mappings":"AAOC,SAAQA,GAAG,QAAO,KAAK,EAAE;AACtB,eAAe;EACfC,KAAK,EAAE;IACHC,WAAW,EAAEC,QAAQ;IACrBC,OAAO,EAAEC;EACb,CAAC;EACGC,KAAKA,CAAA,EAAE;IAEH,IAAIC,KAAI,GAAIP,GAAG,CAAC,CAAC,CAAC,EAAE;IACA;IACpB,MAAMQ,OAAM,GAAIA,CAAA,KAAM;MAAE;MACpBD,KAAK,CAACE,KAAI,EAAI,EAAG;MACjBC,OAAO,CAACC,GAAG,CAACJ,KAAK;MACjB;MACA;MACA;MACA;MACA;MACA;MACA;MACA;IACJ;;IAEA,MAAMK,QAAO,GAAIA,CAAA,KAAM;MACnBX,KAAK,CAACC,WAAW,EAAE;IACvB;IAGA,OAAM;MACFK,KAAK;MACLC,OAAO;MACPI;IACJ;EACJ;AACR"},"metadata":{},"sourceType":"module","externalDependencies":[]}